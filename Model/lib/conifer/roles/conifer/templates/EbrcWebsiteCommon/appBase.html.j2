<!doctype html>
<html lang="en">
  <head>
    {% set displayName = project if project != 'EuPathDB' else 'VEuPathDB' %}
    <title>{% block title %}{{ displayName }}{% endblock %}</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link href="/{{ webapp_ctx }}/images/{{ displayName }}/favicon.ico" type="image/x-icon" rel="shortcut icon"/>
    <script>
      {# used for webpack. remove this when this can be set at build time. #}
      window.__asset_path_remove_me_please__ = "/{{ webapp_ctx }}/bundles/";

      {# used by EbrcWebsiteCommon to initialize wdk #}
      window.__SITE_CONFIG__ = {
        {% block siteConfig %}
        requireLogin: "{{ requireLogin | default('false')}}" === "true",
        rootElement: "#wdk-container",
        rootUrl: "{{ modelprop.WEBAPP_BASE_URL|default('') }}",
        endpoint: "{{ modelprop.REST_SERVICE_BASE_URL|default('') }}",
        projectId: "{{ modelprop.PROJECT_ID|default('') }}",
        webAppUrl: "{{ modelprop.LEGACY_WEBAPP_BASE_URL|default('') }}",
        facebookUrl: "{{ modelprop.FACEBOOK_URL|default('') }}",
        twitterUrl: "{{ modelprop.TWITTER_URL|default('') }}",
        twitterUrl2: "{{ modelprop.TWITTER_URL_2|default('') }}",
        youtubeUrl: "{{ modelprop.YOUTUBE_URL|default('') }}",
        discordUrl: "{{ modelprop.DISCORD_URL|default('') }}",
        linkedinUrl: "{{ modelprop.LINKEDIN_URL|default('') }}",
        redditUrl: "{{ modelprop.REDDIT_URL|default('') }}",
        vimeoUrl: "{{ modelprop.VIMEO_URL|default('') }}",
        blueskyUrl: "{{ modelprop.BLUESKY_URL|default('') }}",
        communitySite: "{{ modelprop.COMMUNITY_SITE|default('') }}",
        siteSearchServiceUrl: "{{ modelprop.SITE_SEARCH_SERVICE_URL|default('') }}",
        {% if eda is defined %}
        useEda: "true" === "{{ eda.enabled|default('false')}}",
        edaExampleAnalysesAuthor: "{{ eda.example_analyses_author|string|default('') }}",
        edaServiceUrl: "{{ eda.service_base_url|default('') }}",
        {% if eda.single_app_mode is defined %}
        edaSingleAppMode: "{{ eda.single_app_mode }}",
        {% endif %}
        edaEnableFullScreenApps: "true" === "{{ eda.enableFullScreenApps|default('false') }}",
        {% endif %}
        {% if user_datasets_workspace is defined %}
        useUserDatasetsWorkspace: "true" === "{{ user_datasets_workspace.enabled|default('false')}}",
        communityDatasetsEnabled: "{{ user_datasets_workspace.community|default('') }}",
        datasetImportUrl: "{{ user_datasets_workspace.import_url|default('') }}",
        userDatasetsUploadTypes: "{{ user_datasets_workspace.uploadTypes|default('') }}",
        {% endif %}
        showUnreleasedData: "true" === "{{ showUnreleasedData|default('false') }}",
        {% if vdi is defined %}
        vdiServiceUrl: "{{ vdi.service_base_url|default('')}}",
        {% endif %}
        {% endblock %}
      };
    </script>
    {# Initialize google analytics. A pageview event will be sent in the JavaScript code. #}
    {%- if modelprop.GOOGLE_ANALYTICS_ID is defined %}{%- if modelprop.GOOGLE_ANALYTICS_ID.startswith('UA') %}
      <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
        ga('create', '{{ modelprop.GOOGLE_ANALYTICS_ID }}', 'auto');</script>
    {%- else %}
      <script async src="https://www.googletagmanager.com/gtag/js?id={{ modelprop.GOOGLE_ANALYTICS_ID }}"></script>
      <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', '{{ modelprop.GOOGLE_ANALYTICS_ID }}');
      </script>
    {%- endif %}{%- endif %}
    {# TODO Use a file checksum as the random id. #}
    {# Generate a 32 byte random id for cache busting purposes. #}
    {# The web server handles stripping the random_id from the request. #}
    {% set random_id = range(9999999999) | random | to_uuid | replace('-', '') %}
    <script charset="utf8" src="/{{ webapp_ctx }}/bundles/site-client.bundle-{{ random_id }}.js" ></script>
    <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"/>
    <link rel="stylesheet" type="text/css" href="/{{ webapp_ctx }}/bundles/site-client.bundle-{{ random_id }}.css"/>
  </head>
  {% set bodyClassName = 'vpdb-Body' if project != 'ClinEpiDB' and project != 'AllClinEpiDB' and project != 'MicrobiomeDB' else 'wdk-Body' %}
  <body class="{{ bodyClassName }}">
    <div class="main-stack">
      <div id="wdk-container">
        {% block content %}
          Loading...
        {% endblock %}
      </div>
    </div>
    {%- if project != 'ClinEpiDB' and project != 'AllClinEpiDB' and project != 'MicrobiomeDB'  %}
      {% set room = 'VEuPathDB-genomic' %}
      <script>
        ((window.gitter = {}).chat = {}).options = {
          room: '{{ room }}/community'
        };
        document.addEventListener(
          'gitter-sidecar-instance-started', 
          function gitterSidecarHack() {
            const gitterBtn = document.querySelector('.gitter-open-chat-button');
            const gitterAside = document.querySelector('.gitter-chat-embed');

            // we want to hide the aside and any loading indicators when button is clicked
            gitterAside.style.display = 'none';
            document.querySelector('.gitter-chat-embed-loading-wrapper').style.display = 'none';

            if (gitterBtn.baseURI.includes('embed-record')) {
              gitterBtn.style.display = 'none';
            }

            gitterBtn.addEventListener(
              'click', 
              function openGitterInNewTab(e) {
                e.stopPropagation();
                e.preventDefault();
                window.open('https://app.gitter.im/#/room/#VEuPathDB-genomic_community:gitter.im', "VEuPathDBGitterForum");
              }, 
              true
            );

            gitterAside.addEventListener(
              'gitter-chat-toggle', 
              function keepGitterBtnVisible() {
                // we want the chat button to remain visible when clicked
                gitterBtn.classList.remove('is-collapsed');
              }
            )
          }
        );
        // Prioritize loading application data over this script
        setTimeout(2000, function loadSideCar() {
          const scriptTag = document.createElement('script');
          scriptTag.src = 'https://cdn.jsdelivr.net/npm/gitter-sidecar@1.5.0/dist/sidecar.min.js';
          document.head.appendChild(scriptTag);
        });
      </script>
    {%- endif %}
  </body>
</html>
